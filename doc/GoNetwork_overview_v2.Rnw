\documentclass{article}
\title{Using GoNetwork}
\author{Sara Linker}

\usepackage{Sweave}
\begin{document}
\maketitle
\SweaveOpts{concordance=TRUE}

\section*{Introduction}
  The purpose of GoNetwork is to calculate networks based on GO annotation and to identify clusters that are differentially enriched between conditions based on expression data. Networks created using this program are easily plotted with molecular visualization software platforms such as Cytoscape. }

\section*{Background}
  Functional annotation is often used as a descriptive tool to examine gene sets identified through upstream analyses. This has been useful in describing what types of pathways and mechanisms are attributable to a given system, however there are limitations in both the ability to describe a system and to quantify these descriptions with many of the current functional annotation methods. GONetwork is a user-friendly method that increases the information returned from functional enrichment analyses by reducing the reliance on }
<<Internal Functions, echo=FALSE>>=
library(GONetwork)
@

<<Symbol Convert, echo=F>>=
#gene.numbers <- read.csv("~/Downloads/GeneLists/adhd1.csv")
#gene.numbers <- as.character(as.character(gene.numbers[2:dim(gene.numbers)[1],]#))
#gene.numbers<- as.data.frame(gene.numbers)
#gene.numbers=as.vector(gene.numbers)

@

\section*{Run}
GONetwork is designed to take a list of genes and calculate a similarity matrix based on the hierarchical representation of GO terms and taking into account the sparsity of the dataset. We've provided a test dataset to work with generated from real data examining neural progenitor cells throughout differentiation into neurons. The dataset \textsl{differentiation} contains an object \textsl{genes} with the significant genes from this analysis.

<<Load Data, echo=T>>=
data(differentiation)
head(genes)
@

\section*{Generate GOterm Matrix}
Use \textbf{getGo()} to create a matrix of GO terms based on the gene list.  GoNetwork improves upon previous functional gene enrichment tools by applying weights to the binary GO term matrix based on the number of parents in the GO hierarchy. The time limitation is the connection to the GO term database.
<<getGo, echo=T>>=
M <- getGo(genes,species = "human")
@


Once the GO term matrix is created, use \textbf{GoTheDist()} to calculate the distances between genes. \textbf{GoTheDist()} allows users to restrict the scope of GO terms based on minimum number of genes that fall under a GO term and minimum number of parents. Users may also choose whether the distances are calculated using the cosine function, manhattan distance or euclidean method: \textit{"cosine", "manhattan" or "euclidean"}.  In this case, the cosine function is used.

\vspace{5mm}
<<GoTheDist, echo=T>>=
#D <- GoTheDist(M,method="cosine",Min=6,minparents=15)
#quantile(D)
@

After distances have been calculated, convert the matrix to Cytoscape format using \textbf{cyto()}. Stringency can be adjusted by changing the lower and upper cutoff values. \textit{low.cutoff} is the minimum distance between two genes for the connection to be sent to cytoscape view, whereas \textit{high.cutoff} is the maximum distance.  \textit{Note: this may be confusing to users because low.cutoff is used for cosine and high.cutoff must be used for euclidean and manhattan.}

<<cyto,echo=T>>=
#tab<-cyto(D,method="cosine",low.cutoff=.5,high.cutoff=Inf)
#head(tab)

@



Users can specify the cutoff values manually, or use \textbf{cutoff()} to calculate the cutoff values automatically.  This function locates the modes in the distribution of distance values and calculates the cutoff value that will provide optimal clustering. \textit{Sentence about stringency after figuring out with Sara}
\vspace{2mm}
<<cutoff,echo=T>>=
#cut<-cutoff(M,method = "cosine",stringency=2.5,Min = 6,minparents = 15)
#cut
@


Then write the resulting matrix to a .txt file.
<<write.table,echo=T>>=
#forcyto<-cyto(D,method="cosine",low.cutoff=cut,high.cutoff=Inf)
#write.table(forcyto,row.names = F,file = "forcyto.txt",col.names = T,sep=",")
@

% \begin{figure}[!htb]
% \centering
% \includegraphics[width=6cm,height=6cm,angle=-90]{cosinehist.pdf}
% \caption{Histogram of distance value distribution after cutoff was applied
% \label{fig:filename1}}
% \end{figure}
% 
% \begin{figure}[!htb]
% \centering
% \includegraphics[width=6cm,height=6cm,angle=-90]{test1.png}
% \caption{Cluster Diagram Generated in Cytoscape
% \label{fig:filename1}}
% \end{figure}

\newpage
\subsection*{Other Functions Included}

Use \textbf{symbolConvert()} to convert alternative gene notations to the desired format.  In this case, a list of entrezgene IDs are converted to their respective HGNC gene symbols.

<<symbolconvert, echo=T>>=
#head(gene.numbers)
#gene.symbols<-symbolConvert(gene.numbers,"entrezgene","hgnc_symbol")
#head(gene.symbols)
@



Use \textbf{exactTerms()} to identify GO terms containing a specified character string
<<exactTerms, echo=T>>=
#e<-exactTerms(colnames(M), term = "vesicle")
#head(e)
#Note: ask Sara if this is the correct use of the function
@
\vspace{4mm}
Use \textbf{findGenes()} to return a list of genes with GO terms containing a specified character string.  We can use one of the terms found using the exactTerms() function above:
<<findGenes, echo=T>>=

#head(findGenes(M, term = "acrosomal.vesicle"))

@
\vspace{4mm}

If you would like to identify the GO terms that a group of genes have in common, for instance, a list of genes taken from a cluster seen after plotting in cytoscape, use \textbf{findTerms()}:
<<findTerms, echo=T>>=

#findTerms(M, geneA = "APOE" ,geneB = "FNBP1L",geneC="TBC1D10A")
@




\end{document}